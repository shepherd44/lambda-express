service: base-lambda-express

plugins:
  - serverless-layers
  - serverless-deployment-bucket

custom:
  VPC_CIDR: 172.0.0.0/16
  DB_NAME: test_database
  DB_USERNAME: db_user
  DB_PASSWORD: db_user_password
  DB_SUBNET_CIDR_A: 172.0.0.0/24
  DB_SUBNET_CIDR_C: 172.0.2.0/24
  DEPLOY_BUCKET_NAME: ${self:provider.region}-${self:service}-deploys
  COGNITO_USERPOOL_NAME: ServerlessUserPool
  COGNITO_USERPOOL_CLIENT_NAME: ServerlessUserPoolClient
  COGNITO_DOMAIN: serverless-cognito

  serverless-layers:
    - express-lambda:
        functions:
          - express-lambda
        dependenciesPath: ./packages/express-lambda/package.json
    - node-lambda:
        functions:
          - node-lambda
        dependenciesPath: ./packages/node-lambda/package.json
  deploymentBucket:
    blockPublicAccess: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-2'}
  runtime: nodejs14.x
  logRetentionInDays: 14
  deploymentBucket:
    name: ${self:custom.DEPLOY_BUCKET_NAME}

resources:
  Resources:
    LambdaRole: ${file(./serverless.resources/LambdaRole.yml)}
    Gateway: ${file(./serverless.resources/Gateway.yml)}
    RouteTablePublic: ${file(./serverless.resources/RouteTablePublic.yml)}
    RoutePublic: ${file(./serverless.resources/RoutePublic.yml)}
    VPC: ${file(./serverless.resources/VPC.yml)}
    VPCGatewayAttachment: ${file(./serverless.resources/VPCGatewayAttachment.yml)}
    DataTable: ${file(./serverless.resources/DataTable.yml)}
    CognitoUserPool: ${file(./serverless.resources/CognitoUserPool.yml)}
    CognitoUserPoolClient: ${file(./serverless.resources/CognitoUserPoolClient.yml)}
    CognitoUserPoolDomain: ${file(./serverless.resources/CognitoUserPoolDomain.yml)}
    GatewayCognitoAuthorizer: ${file(./serverless.resources/GatewayCognitoAuthorizer.yml)}


functions:
  express-lambda:
    handler: packages/express-lambda/src/lambda.handler
    role: LambdaRole
    package:
      patterns:
        - '!**'
        - packages/express-lambda/src/**/*.js
        - packages/express-lambda/src/*.js
        - packages/express-lambda/*.js
      individually: true
    environment:
      DATA_TABLE_NAME:
        Fn::GetAtt: [DataTable, Arn]
    events:
      - http:
          path: /data
          method: any
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: GatewayCognitoAuthorizer
      - http:
          path: /data/{any+}
          method: any
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: GatewayCognitoAuthorizer

  node-lambda:
    handler: packages/node-lambda/lambda.handler
    role: LambdaRole
    package:
      patterns:
        - '!**'
        - packages/node-lambda/*.js
      individually: true
    environment:
      DATA_TABLE_NAME:
        Fn::GetAtt: [DataTable, Arn]
      USER_POOL_PROVIDER_URL:
        Fn::GetAtt: [CognitoUserPool, ProviderURL]
      USER_POOL_PROVIDER_NAME:
        Fn::GetAtt: [CognitoUserPool, ProviderName]
    events:
      - http:
          path: /node
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: GatewayCognitoAuthorizer

